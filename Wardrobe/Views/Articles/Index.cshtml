@model IEnumerable<Wardrobe.Models.Article>

<!--List view of every article of clothing at once. If I had more time I would want to tweak the theme since right
	now every element tends to look the same at a glance, making distinguishing the key components take longer-->
@{
	ViewBag.Title = "Index";
}

@section header {
	<h2>Article Index</h2>
}

<!--Five buttons that create a new item, or sort the list into one of four categories-->
<div class="row button-row">
	@Html.ActionLink("New", "Create", "Articles", routeValues: null, htmlAttributes: new { @class = "col-xs-12 col-sm-2 btn btn-info btn-link transparent-blackbox" })
	@Html.ActionLink("Tops", "Tops", "Articles", routeValues: null, htmlAttributes: new { @class = "col-xs-12 col-sm-2 btn btn-info btn-link transparent-blackbox" })
	@Html.ActionLink("Bottoms", "Bottoms", "Articles", routeValues: null, htmlAttributes: new { @class = "col-xs-12 col-sm-2 btn btn-info btn-link transparent-blackbox" })
	@Html.ActionLink("Shoes", "Shoes", "Articles", routeValues: null, htmlAttributes: new { @class = "col-xs-12 col-sm-2 btn btn-info btn-link transparent-blackbox" })
	@Html.ActionLink("Accessories", "Accessories", "Articles", routeValues: null, htmlAttributes: new { @class = "col-xs-12 col-sm-3 btn btn-info btn-link transparent-blackbox" })
</div>
<!--The property names bar. At the top. I wanted to find a way to distinguish it from the rest of the list but changing 
	the colors clashed with the rest of the theme and there wasn't enough room to change the font to something bolder, 
	so I ended up just increasing its margins.-->
<div class="row list-index transparent-blackbox name-header hidden-xs">
	<div class="col-sm-2">
		@Html.DisplayNameFor(model => model.Name)
	</div>
	<!--
	<div>
		Html.DisplayNameFor(model => model.Photo)
	</div>
	-->
	<div class="col-sm-2">
		@Html.DisplayNameFor(model => model.Type)
	</div>
	<div class="col-sm-1">
		@Html.DisplayNameFor(model => model.Color)
	</div>
	<div class="col-sm-1">
		@Html.DisplayNameFor(model => model.Season)
	</div>
	<div class="col-sm-1">
		@Html.DisplayNameFor(model => model.Occasion)
	</div>
	<div class="col-sm-2">
		@Html.DisplayNameFor(model => model.Material)
	</div>
</div>
<!--Every item is on its own line-->
@foreach (var item in Model)
{
	<div class="row list-index transparent-blackbox">
		<div class="col-sm-2">
			@Html.DisplayFor(modelItem => item.Name)
		</div>
		<!--
			<div class="col-xs-1 well">
				Html.DisplayFor(modelItem => item.Photo) <-- It might look good to have the icon on the far left? Possibilities...
			</div>
			-->
		<div class="col-sm-2">
			@Html.DisplayFor(modelItem => item.Type)
		</div>
		<div class="col-sm-1">
			@Html.DisplayFor(modelItem => item.Color)
		</div>
		<div class="col-sm-1">
			@Html.DisplayFor(modelItem => item.Season)
		</div>
		<div class="col-sm-1">
			<!--This displays the OccasionID from the linking table rather than the Occasion Name. I attempted
				to fix this, first by specifying Occasion.Name, item.Occasion1.Name etc but it kept giving me
				"ambigous type" errors. I then moved on to attempting to pass the linking table information in the
				controller but never got the view and controller working together, so it remains unsolved-->
			@Html.DisplayFor(modelItem => item.Occasion)
		</div>
		<div class="col-sm-2">
			@Html.DisplayFor(modelItem => item.Material1.Name)
		</div>
		<!--These might work better as buttons?-->
		<div class="col-sm-1">
			@Html.ActionLink("Edit", "Edit", new { id = item.ArticleID })
		</div>
		<div class="col-sm-1">
			@Html.ActionLink("Details", "Details", new { id = item.ArticleID })
		</div>
		<div class="col-sm-1">
			@Html.ActionLink("Delete", "Delete", new { id = item.ArticleID })
		</div>
	</div>
}
